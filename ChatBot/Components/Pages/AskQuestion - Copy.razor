@page "/1"
@using System.Text.RegularExpressions
@using System.Web
@using ChatBot.Services
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@using Microsoft.SemanticKernel.Connectors.OpenAI
@using System.Text.Json
@using System.Net.Http.Headers

@inject KernelMemoryService AIService
@inject IJSRuntime _jsRuntime
@rendermode InteractiveServer


<section class="avenue-messenger">
    <div class="agent-face">
        <div class="half">
            <img class="agent circle" src="bot-icon.jpg" alt="Bot">
        </div>
    </div>
    <div class="chat">
        <div class="chat-title">
            <h1>ChatBot</h1>
        </div>
        <div class="messages">
            <div id="messageContainer" class="messages-content">
                @foreach (var q in conversation)
                {
                    @if (q.role.Equals(AuthorRole.Assistant))
                    {
                        <div class="message new">
                            <figure class="avatar"><img src="bot-icon.jpg" /></figure>
                            @((MarkupString)q.message)
                            @if (q.time != null)
                            {
                                <div class="timestamp">@q.time</div>
                            }
                        </div>
                    }
                    @if (q.role.Equals(AuthorRole.User))
                    {
                        <div class="message message-personal new">
                            @q.message
                            @if (q.time != null)
                            {
                                <div class="timestamp">@q.time</div>
                            }
                        </div>
                    }
                }
            </div>
        </div>               
        <div class="message-box">
            <input type="text" class="message-input" placeholder="Upišite poruku..." @bind="question" @onkeyup="AskOnEnter"></input>
            <button type="submit" class="message-submit" @onclick="Ask" disabled="@_isBusy">Pošalji</button>
        </div>
    </div>
</section>

@code {
    private string question;
    //private KernelResponseDto answer;
    ChatHistory _chatHistory;
    IChatCompletionService _completionService;
    OpenAIPromptExecutionSettings settings;
    Kernel _kernel;

    //StatelessExecutor executor;

    private int _promptTokenCount;

    List<Message> conversation = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _chatHistory = new ChatHistory();
    #pragma warning disable SKEXP0010
        var kernelBuilder = Kernel.CreateBuilder();
        _kernel = kernelBuilder.AddOpenAIChatCompletion(modelId: "llama3", apiKey: null, endpoint: new Uri("http://localhost:11434")).Build();
    #pragma warning restore SKEXP0010

        _completionService = _kernel.GetRequiredService<IChatCompletionService>();

        var prompt = $@"
            Answer only in Croatian.
            Answers must be short and concise.";


        settings = new()
        {
            ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions,
            ChatSystemPrompt = prompt,
            ModelId = "llama3",
            Temperature = 0.1,
            FrequencyPenalty = 0.0,
            PresencePenalty = 0.0,
            TopP = 1.0
        };

        conversation.Add(new(AuthorRole.Assistant, "Poštovanje, ja sam ChatBot za brodarsku tvrtku, pomoći ću vam sa svim pitanjima u vezi s njom. Kako vam mogu pomoći danas?", DateTime.Now.ToString("HH:mm")));

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeAsync<string>("ScrollToBottom", null);
    }

    private bool _isBusy;
    public bool micOn = false;
    private DotNetObjectReference<AskQuestion>? objRef;


    private async Task Ask()
    {
        try
        {
            if (string.IsNullOrEmpty(question)) return;

            _isBusy = true;
            StateHasChanged();


            conversation.Add(new(AuthorRole.User, question, DateTime.Now.ToString("HH:mm")));
            _chatHistory.AddMessage(AuthorRole.User, question);
            question = null;

            var stream = _completionService.GetStreamingChatMessageContentsAsync(_chatHistory, settings, _kernel);
            /*ChatSession session = new(executor, _chatHistory);
            var stream = session.ChatAsync(new ChatHistory.Message(AuthorRole.User, question));*/

            var content = "...";
            conversation.Add(new(AuthorRole.Assistant, content, null));
            content = "";
            await foreach (var contentPiece in stream)
            {
                if (string.IsNullOrEmpty(contentPiece.Content)) continue;
                content += contentPiece.Content;
                conversation[conversation.Count - 1].message = content;
                StateHasChanged();
            }


            conversation[conversation.Count - 1].time = DateTime.Now.ToString("HH:mm");
            _chatHistory.AddMessage(AuthorRole.Assistant, content);
    
        }
        catch (Exception e)
        {
            conversation[conversation.Count - 1].message = "Došlo je do pogreške prilikom komunikacije. Molim Vas ponovite zadnji upit.";
            conversation[conversation.Count - 1].time = DateTime.Now.ToString("HH:mm");

            await _jsRuntime.InvokeVoidAsync("logError", e.Message);

        }
        finally
        {
            _isBusy = false;
            StateHasChanged();
        }

    }

    private void AskOnEnter(KeyboardEventArgs eventArgs)
    {
        if ((eventArgs.Key == "Enter" || eventArgs.Code == "NumpadEnter") && !_isBusy)
        {
            Ask();
        }
    }


    private class Message
    {
        public AuthorRole role { get; set; }
        public string? message { get; set; }
        public string? time { get; set; }

        public Message(AuthorRole _role, string _message, string? _time)
        {
            role = _role;
            message = _message;
            time = _time;
        }
    }
}


<script>
    window.ScrollToBottom = () => {
        var objDiv = document.getElementById("messageContainer");
        objDiv.scrollTop = objDiv.scrollHeight;
    }
</script>